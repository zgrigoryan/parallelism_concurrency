name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
    
    - name: Configure CMake
      shell: bash         
      run: |
        cmake -S . -B build \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DFAST_CI=ON     
  
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel
      
    - name: Run examples
      shell: bash
      run: |
        set -e
        cd build
        progs=(multithread_sum thread_pool_sum async_sum atomic_vs_mutex race_condition)
        # priority_inversion only on POSIX:
        [[ "${{ matrix.os }}" == "ubuntu-latest" ]] && progs+=(priority_inversion)
        for p in "${progs[@]}"; do
          echo "::group::$p"
          ./"$p"
          echo "::endgroup::"
        done

